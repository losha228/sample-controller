/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "k8s.io/sample-controller/pkg/apis/sonick8s/v1alpha1"
)

// SonicDaemonSetDeploymentLister helps list SonicDaemonSetDeployments.
// All objects returned here must be treated as read-only.
type SonicDaemonSetDeploymentLister interface {
	// List lists all SonicDaemonSetDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SonicDaemonSetDeployment, err error)
	// SonicDaemonSetDeployments returns an object that can list and get SonicDaemonSetDeployments.
	SonicDaemonSetDeployments(namespace string) SonicDaemonSetDeploymentNamespaceLister
	SonicDaemonSetDeploymentListerExpansion
}

// sonicDaemonSetDeploymentLister implements the SonicDaemonSetDeploymentLister interface.
type sonicDaemonSetDeploymentLister struct {
	indexer cache.Indexer
}

// NewSonicDaemonSetDeploymentLister returns a new SonicDaemonSetDeploymentLister.
func NewSonicDaemonSetDeploymentLister(indexer cache.Indexer) SonicDaemonSetDeploymentLister {
	return &sonicDaemonSetDeploymentLister{indexer: indexer}
}

// List lists all SonicDaemonSetDeployments in the indexer.
func (s *sonicDaemonSetDeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.SonicDaemonSetDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SonicDaemonSetDeployment))
	})
	return ret, err
}

// SonicDaemonSetDeployments returns an object that can list and get SonicDaemonSetDeployments.
func (s *sonicDaemonSetDeploymentLister) SonicDaemonSetDeployments(namespace string) SonicDaemonSetDeploymentNamespaceLister {
	return sonicDaemonSetDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SonicDaemonSetDeploymentNamespaceLister helps list and get SonicDaemonSetDeployments.
// All objects returned here must be treated as read-only.
type SonicDaemonSetDeploymentNamespaceLister interface {
	// List lists all SonicDaemonSetDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SonicDaemonSetDeployment, err error)
	// Get retrieves the SonicDaemonSetDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SonicDaemonSetDeployment, error)
	SonicDaemonSetDeploymentNamespaceListerExpansion
}

// sonicDaemonSetDeploymentNamespaceLister implements the SonicDaemonSetDeploymentNamespaceLister
// interface.
type sonicDaemonSetDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SonicDaemonSetDeployments in the indexer for a given namespace.
func (s sonicDaemonSetDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SonicDaemonSetDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SonicDaemonSetDeployment))
	})
	return ret, err
}

// Get retrieves the SonicDaemonSetDeployment from the indexer for a given namespace and name.
func (s sonicDaemonSetDeploymentNamespaceLister) Get(name string) (*v1alpha1.SonicDaemonSetDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sonicdaemonsetdeployment"), name)
	}
	return obj.(*v1alpha1.SonicDaemonSetDeployment), nil
}
