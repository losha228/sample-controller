/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "k8s.io/sample-controller/pkg/apis/sonick8s/v1alpha1"
)

// DcDaemonSetLister helps list DcDaemonSets.
// All objects returned here must be treated as read-only.
type DcDaemonSetLister interface {
	// List lists all DcDaemonSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DcDaemonSet, err error)
	// DcDaemonSets returns an object that can list and get DcDaemonSets.
	DcDaemonSets(namespace string) DcDaemonSetNamespaceLister
	DcDaemonSetListerExpansion
}

// dcDaemonSetLister implements the DcDaemonSetLister interface.
type dcDaemonSetLister struct {
	indexer cache.Indexer
}

// NewDcDaemonSetLister returns a new DcDaemonSetLister.
func NewDcDaemonSetLister(indexer cache.Indexer) DcDaemonSetLister {
	return &dcDaemonSetLister{indexer: indexer}
}

// List lists all DcDaemonSets in the indexer.
func (s *dcDaemonSetLister) List(selector labels.Selector) (ret []*v1alpha1.DcDaemonSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DcDaemonSet))
	})
	return ret, err
}

// DcDaemonSets returns an object that can list and get DcDaemonSets.
func (s *dcDaemonSetLister) DcDaemonSets(namespace string) DcDaemonSetNamespaceLister {
	return dcDaemonSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DcDaemonSetNamespaceLister helps list and get DcDaemonSets.
// All objects returned here must be treated as read-only.
type DcDaemonSetNamespaceLister interface {
	// List lists all DcDaemonSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DcDaemonSet, err error)
	// Get retrieves the DcDaemonSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DcDaemonSet, error)
	DcDaemonSetNamespaceListerExpansion
}

// dcDaemonSetNamespaceLister implements the DcDaemonSetNamespaceLister
// interface.
type dcDaemonSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DcDaemonSets in the indexer for a given namespace.
func (s dcDaemonSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DcDaemonSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DcDaemonSet))
	})
	return ret, err
}

// Get retrieves the DcDaemonSet from the indexer for a given namespace and name.
func (s dcDaemonSetNamespaceLister) Get(name string) (*v1alpha1.DcDaemonSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dcdaemonset"), name)
	}
	return obj.(*v1alpha1.DcDaemonSet), nil
}
